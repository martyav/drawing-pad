body {
    background: white;
    font-size: 16px;
    margin: 0;
    padding: 0;
    border: 0;
    font-family: 'Work Sans', 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
    text-transform: uppercase;
}

main {
    display: grid;
    grid-template-columns: 18vw 82vw;
    grid-template-rows: 100vh;
}

#controls {
    width: 100%;
    height: 100vh;
}

ul {
    list-style: none;
    padding: 16px;
    margin: 5px;
    margin-top: 0;
    border: 5px solid black;
}

li {
    margin-left: 0; 
    margin-bottom: 40px;
}

.containsButton {
    margin-bottom: 20px !important; /* An inelegant solution to there being no parent selector */
}

input {
    box-shadow: 3px 3px black;
    border: 1px solid black;
    background: white;
}

input[type = 'radio'] {
    display: inline;
    box-shadow: none;
    border: none;
}

label {
    display: block;
    margin-bottom: 4px;
    margin-top: 4px;
}

.radioContainer {
    display: flex;
    align-items: center;
}

select {
    border: 1px solid black;
    box-shadow: 3px 3px black;
    font-size: inherit;
}

button {
    padding: 10px;
    margin-bottom: 4px;
    margin-top: 4px;
    border: 1px solid black;
    box-shadow: 3px 3px black;
    background: #e3cf1c;
    color: black;
    font-family: inherit;
    font-size: 0.9em;
    text-transform: inherit;
}

button:active, input[type=color]:active {
    transform: translate(3px, 3px);
    box-shadow: none;
}

button:disabled {
    box-shadow: none;
    background: #aaaaaa;
    color: white;
    border: 1px solid #666666;
}

#promptDisplay {
    display: flex;
    height: 5em;
    padding: 16px;
    text-align: center;
    align-items: center;
    justify-content: center;
    border: 3px solid black;
    border-radius: 50%;
    background: white;
    font-family: 'Walter Turncoat', sans-serif;
    font-weight: bold;
    text-overflow: ellipsis;
}

#artPrompt {
    /* background: rgb(255, 160, 160); */
}

#tool {
    /* background: rgb(138, 255, 255); */
}

#state {
    /* background: rgb(255, 255, 138); */
}

li:last-child {
    margin-bottom: 0px;
}

button:last-child {
    margin-bottom: 3px;
}

#drawHere {
    width: 100%;
    height: 100vh;
    outline: 5px solid black;
    outline-offset: -5px;
    /* outline is a property similar to border, but it is not counted as part of the element's dimensions. By default it is always outside the border area, but we can use outline-offset to position it more precisely in respect to its element. Setting it to be the inverse of its own width ensures it is contained within the div and prevents ugly scrollbars from being added to the page, as was the case when we were using border to create the same effect */
}

#timer {
    position: absolute;
    display: flex;
    align-items: center;
    justify-items: center;
    justify-content: space-evenly;
    top: 0;
    left: 18vw;
    height: 50px;
    width: auto;
    border: 5px solid black;
    background: black;
    font-weight: bold;
    transition: transform 1s;
}

.reveal, #timer > button {
    box-shadow: none;
    align-content: stretch;
    margin-bottom: 0;
    height: inherit;
    outline: 3px solid black;
}

.reveal button:active, #timer > button:active {
    transform: scale(0.9);
}

.countdown {
    display: flex;
    font-family: 'Share Tech Mono', 'Courier New', Courier, monospace;
    font-weight: bold;
    background: rgb(43, 2, 2);
    color: rgb(125, 100, 100);
    border: 1px solid rgb(70, 2, 2);
    margin-left: 16px;
    margin-right: 16px; 
    padding: 4px;
}

.lightUp {
    color: red;
    border: rgb(90, 2, 2); /* dark red */
    animation-name: flash;
    animation-duration: 500ms;
    transition: 500ms;
}

@keyframes flash {
    0% { background: rgb(125, 100, 100); } /* light pinkish red */
    50% { background: red; }
}

.hide {
    margin: 0;
}

.stopStart {
    margin: 0;
}

.reveal {
    position: absolute; 
    top: 50px;
    left: 18vw;
    margin-left: 3px;
    transition: all 1s;
}